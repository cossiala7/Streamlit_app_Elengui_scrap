import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from requests import get 
import necessary as ns
import streamlit.components.v1 as components
from bs4 import BeautifulSoup as bs
from pathlib import Path

# Contenu de la sidebar
st.sidebar.title("üìå Menu")
option = st.sidebar.selectbox("üéØ Choisissez une option", ["Accueil","Scrap avec Beautifulsoup","Datasets" ,"Visualisation"],index = 0, )
st.sidebar.write("---")
st.sidebar.write(""" Elengui Scrap
votre assistant data!
donn√©es temps r√©el,
analyse instantan√©e,
multi-plateformes,
export simple.
La donn√©e n'a jamais √©t√© aussi accessible !""")
st.sidebar.write("---")

st.sidebar.link_button("Evaluer l'app","https://ee.kobotoolbox.org/i/d1fEvstv")
# Ajout de styles CSS personnalis√©s

st.markdown(""" 
    <style>
        .st-emotion-cache-4tlk2p egexzqm0{
            width : 270px;
        }
        .st-emotion-cache-jp5qej efj1jhq2{
            display: inline-flex;
            -moz-box-align: center;
            align-items: center;
            -moz-box-pack: center;
            justify-content: center;
            font-weight: 400;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            min-height: 2.5rem;
            margin: 0px;
            line-height: 1.6;
            text-decoration: none;
            user-select: none;
            background-color: rgb(249, 249, 251);
            color: rgb(49, 51, 63);
            border: 1px solid rgba(49, 51, 63, 0.2);
            width: 270px;
        }
        @media (prefers-color-scheme: dark) {
            body {
                background-color: black;
                color: white;
            }
        }

        @media (prefers-color-scheme: light) {
            body {
                background-color: white;
                color: black;
            }
        }
        /* Titres et sous-titres en bleu fonc√© */
        h1, h2, h3 {
            text-align: center;
        }

        /* Boutons et s√©lections */
        .stSelectbox label {
            font-weight: bold;
        }

        /* Cartes et blocs de contenu */
        .css-1lcbmhc {
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }
        [data-testid="stSidebar"] button {
        width: 100%;
        color: #4B5320;
        }
    </style>
""", unsafe_allow_html=True)
# Titre principal
# Contenu principal
if option == "Accueil":
    st.title("‚ú® Bienvenue sur Elengui scrap")
    st.header(" ")
    st.write("""
    Elengui Scrap est une application puissante et intuitive de Web Scraping d√©di√©e √† l'extraction et √† l'analyse des annonces  en ligne. Gr√¢ce √† ses fonctionnalit√©s avanc√©es, vous pouvez facilement r√©cup√©rer, t√©l√©charger et visualiser des donn√©es essentielles pour mieux comprendre le march√© .
    üöÄ Quelles sont les fonctionnalit√©s cl√©s ?

    üîç 1. Scraper les donn√©es en temps r√©el
        Scrapez les annonces  sur deux sites diff√©rents, avec la possibilit√© de choisir entre deux cat√©gories par site.
        Collectez des informations pr√©cieuses comme la superficie, le prix, l'adresse et bien plus encore.
        Utilisation de BeautifulSoup pour un scraping efficace et structur√©.

    üì• 2. T√©l√©charger des jeux de donn√©es vari√©s
        En plus des donn√©es brutes extraites, nous mettons √† disposition plusieurs jeux de donn√©es pour vous permettre de comparer et d‚Äôanalyser diff√©rentes sources.
        Il vous suffit de s√©lectionner le jeu de donn√©es qui vous int√©resse !

    üìä 3. Visualiser les donn√©es
        Analysez rapidement les tendances gr√¢ce √† des graphiques et visualisations interactives.
        Obtenez une vue d‚Äôensemble claire des prix, des superficies et d‚Äôautres indicateurs cl√©s du march√© immobilier.

    üìù 4. √âvaluer l‚Äôapplication
        Donnez-nous votre avis via un formulaire unique d√©di√© aux retours utilisateurs.
        Vos suggestions sont essentielles pour am√©liorer en continu l‚Äôexp√©rience Elengui Scrap.
    
    üí° Pourquoi choisir Elengui Scrap ?
    
    ‚úÖ Facile d‚Äôutilisation ‚Äì Une interface intuitive qui vous guide √† chaque √©tape.
    
    ‚úÖ Rapide et efficace ‚Äì Un scraping optimis√© pour extraire un maximum d‚Äôinformations en un minimum de temps.
    
    ‚úÖ Analyse compl√®te ‚Äì T√©l√©chargez, explorez et visualisez les donn√©es en quelques clics.
    
    S√©lectionnez simplement une option dans le menu et profitez pleinement !""")

elif option == "Scrap avec Beautifulsoup":
    st.title("Beautifulsoup Elengui")
    st.write("Avec l'option Scraper avec Beautifulsoup d'Elengui Scrap, scrapez facilement les donn√©es de deux cat√©gories distinctes des sites [Coin Afrique S√©n√©gal](https://sn.coinafrique.com) et [Dakar auto](https://dakar-auto.com/). D√©finissez vous-m√™me le nombre de pages √† extraire !")
    with st.form("bs_forms"):
        data_scrap = st.selectbox("Quel site voulez vous scrapez?",["","Coin Afrique S√©n√©gal","Dakar Auto"])
        if data_scrap == "Coin Afrique S√©n√©gal":
            data = st.radio(" Vous √™tes sur la cat√©gorie **Terrains**. Souhaitez-vous en choisir une autre ?",["Terrains","Appartements"])
        elif data_scrap == "Dakar Auto" :
            data = st.radio("Quelles donn√©es voulez vous recuperer pour ce site?",["Vehicules","Motos"]) 
        else:
            pass    
        nbre_page = st.number_input("Entrez le nombre de page que vous voulez scraper", min_value=1, max_value=100)
        file_name= st.text_input("Entrez le nom du csv")   
        submit = st.form_submit_button("Commencez le scrap‚úÖ")            
    if submit:
        if  not file_name:
            if st.form_submit_button:
                st.write("‚ùå Impossible d'extraire les donn√©es veuillez verifier les champs...")
            else:
                pass    
        else:    
            with st.spinner("Scraping en cours..."):
                if data_scrap =="Coin Afrique S√©n√©gal" and data == "Appartements":
                    gdf = ns.scrap_appart(nbre_page)
                    st.write(f"Dimension du jeu de donn√©es: {gdf.shape[0]} lignes et {gdf.shape[1]} colonnes")  
                    st.write(gdf)      
                    # Convertir le DataFrame en CSV (sans index)
                    csv2 = gdf.to_csv(index=False).encode('utf-8')
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="T√©l√©charger les donn√©es en CSV",
                        data=csv2,
                        file_name= str(file_name) + ".csv",
                        mime="text/csv")        
                elif data_scrap =="Coin Afrique S√©n√©gal" and data == "Terrains":
                    #Faire un scraping sur toutes les pages 
                    gdf = ns.scrap_terrain(nbre_page) 
                    st.write(f"Dimension du jeu de donn√©es: {gdf.shape[0]} lignes et {gdf.shape[1]} colonnes")  
                    st.write(gdf)      
                    # Convertir le DataFrame en CSV (sans index)
                    csv2 = gdf.to_csv(index=False).encode('utf-8')
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="T√©l√©charger les donn√©es en CSV",
                        data=csv2,
                        file_name= str(file_name) + ".csv",
                        mime="text/csv")   
                    #Gdf["prix"] = Gdf["prix"].astype(int)
                elif data_scrap == "Dakar Auto" and data ==  "Vehicules":
                    dr = ns.scrap_vehicule(nbre_page)
                    st.write(f"Dimension du jeu de donn√©es: {dr.shape[0]} lignes et {dr.shape[1]} colonnes")  
                    st.write(dr)      
                    # Convertir le DataFrame en CSV (sans index)
                    csv2 = dr.to_csv(index=False).encode('utf-8')
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="T√©l√©charger les donn√©es en CSV",
                        data=csv2,
                        file_name= str(file_name) + ".csv",
                        mime="text/csv")   
                elif data_scrap == "Dakar Auto" and data ==  "Motos":
                    mt = ns.scrap_moto(nbre_page) 
                    st.write(f"Dimension du jeu de donn√©es: {mt.shape[0]} lignes et {mt.shape[1]} colonnes")  
                    st.write(mt)      
                    # Convertir le DataFrame en CSV (sans index)
                    csv2 = mt.to_csv(index=False).encode('utf-8')
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="T√©l√©charger les donn√©es en CSV",
                        data=csv2,
                        file_name= str(file_name) + ".csv",
                        mime="text/csv")
                else:
                    pass            
elif option == "Datasets":
    st.title("Fenetres datasets")
    st.write("""Explorez une s√©lection de datasets pr√™ts √† l'emploi pour tester vos analyses et visualisations.
        Ces jeux de donn√©es couvrent divers domaines et vous permettent de vous entra√Æner. T√©l√©chargez un dataset et commencez votre exploration !""")
    path = Path("./data")
    csv_files = [f.name for f in path.glob("*.csv")]
    dtwnt = st.selectbox("Quel jeu de donn√©es voulez-vous t√©l√©charger ?", csv_files)
    if dtwnt:  
        file_path = path / dtwnt  # Construire le chemin complet
        file = pd.read_csv(file_path)  # Lire le CSV
        st.write(file)  # Afficher les donn√©es
        csv_data = file.to_csv(index=False).encode("utf-8")
        st.download_button(
            label="T√©l√©charger les donn√©es en CSV",
            data=csv_data,
            file_name=dtwnt,
            mime="text/csv"
        )
elif option == "Visualisation":
    st.title("Visualisation des fichiers")
    st.markdown("""
    üìÇ **Chargez un fichier pour afficher son contenu**  
    Vous pouvez importer des fichiers **Excel ou CSV**, et leur contenu sera affich√© automatiquement.  
    Cela vous permet d'explorer rapidement vos donn√©es directement dans l'application.

    ‚ö†Ô∏è Pour une bonne visualisation des donn√©es, **assurez-vous que le type de chaque colonne est valide** 
    """)
    # Bouton pour charger un fichier
    uploaded_file = st.file_uploader("Choisissez un fichier", type=["csv", "xlsx"])

    if uploaded_file is not None:
        st.success("Fichier charg√© avec succ√®s !")
        # V√©rification du type de fichier et affichage du contenu
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file, sep=None, engine="python")
            st.subheader("Type des colonnes")
            st.dataframe(pd.DataFrame(df.dtypes, columns=["Type"]).T) 
            st.subheader("üìä Statistiques descriptives")
            st.write(df.describe())
            st.subheader("Aper√ßu des donn√©es")
            st.write(df.head())
            st.subheader("Visualisation graphique des donn√©es")
            cate = df.select_dtypes(include = "object" ) 
            columns_cat = cate.columns.tolist()
            numeric = df.select_dtypes(include="number")
            columns_numeric = numeric.columns.tolist()
            type_avr = st.selectbox("Quelles types de donn√©es voulez-vous visualiser ?",["Num√©rique","Categorielle"])
            if type_avr == "Num√©rique":
                op_vis = st.selectbox("Quelles donn√©es voulez-vous visualiser ?", columns_numeric)
                # üìä S√©lection du type de visualisation
                chart_type = st.selectbox("Choisissez un type de visualisation", 
                                        [" Histogramme", 
                                        " Boxplot", 
                                        " Scatter plot", 
                                        " Heatmap (Corr√©lations)"])
                try:
                    # üîµ Affichage des graphiques en fonction du choix
                    fig, ax = plt.subplots(figsize=(8, 5))
                    if chart_type == " Histogramme":
                        ax.hist(df[op_vis], bins=20, color='skyblue', edgecolor='black')
                        ax.set_title(f"Histogramme de {op_vis}")
                        ax.set_xlabel(op_vis)
                        ax.set_ylabel("Fr√©quence")
                        st.pyplot(fig)
                    elif chart_type == " Boxplot":
                        sns.boxplot(y=df[op_vis], ax=ax, color="lightblue")
                        ax.set_title(f"Boxplot de {op_vis}")
                        st.pyplot(fig)
                    elif chart_type == " Scatter plot":
                        y_var = st.selectbox("S√©lectionnez une autre variable num√©rique", columns_numeric)
                        sns.scatterplot(x=df[op_vis], y=df[y_var], ax=ax, color="blue")
                        ax.set_title(f"Relation entre {op_vis} et {y_var}")
                        ax.set_xlabel(op_vis)
                        ax.set_ylabel(y_var)
                        st.pyplot(fig)
                    elif chart_type == " Heatmap (Corr√©lations)":
                        fig, ax = plt.subplots(figsize=(8, 6))
                        sns.heatmap(numeric.corr(), annot=True, cmap="coolwarm", ax=ax)
                        st.pyplot(fig)
                except:
                    st.error("Impossible d'affichier le graphe veuillez verifier votre dataset")    
            else:
                op_cat = st.selectbox("Choisissez une variable cat√©gorielle :", columns_cat)
                # S√©lection du type de graphique
                chart_type_cat = st.selectbox("Choisissez un type de graphique :", 
                                            [" Diagramme en barres", 
                                            " Diagramme circulaire", 
                                            " Boxplot (comparaison avec une variable num√©rique)"])

                fig, ax = plt.subplots(figsize=(8, 5))
                try:
                    if chart_type_cat == " Diagramme en barres":
                        sns.countplot(x=df[op_cat], ax=ax, palette="viridis", order=df[op_cat].value_counts().index)
                        ax.set_title(f"R√©partition des cat√©gories de {op_cat}")
                        ax.set_xlabel(op_cat)
                        ax.set_ylabel("Nombre d‚Äôoccurrences")
                        ax.tick_params(axis='x', rotation=45)
                        st.pyplot(fig)

                    elif chart_type_cat == " Diagramme circulaire":
                        data_count = df[op_cat].value_counts()
                        ax.pie(data_count, labels=data_count.index, autopct='%1.1f%%', colors=sns.color_palette("pastel"))
                        ax.set_title(f"R√©partition des cat√©gories de {op_cat}")
                        st.pyplot(fig)

                    elif chart_type_cat == " Boxplot (comparaison avec une variable num√©rique)":
                        # S√©lectionner une variable num√©rique pour comparer avec la variable cat√©gorielle
                        y_var = st.selectbox("S√©lectionnez une variable num√©rique :", numeric.columns.tolist())
                        sns.boxplot(x=df[op_cat], y=df[y_var], ax=ax, palette="coolwarm")
                        ax.set_title(f"Distribution de {y_var} selon {op_cat}")
                        ax.tick_params(axis='x', rotation=45)
                        st.pyplot(fig)
                except:
                    st.error("Impossible d'affichier le graphe veuillez verifier votre dataset")
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file, sep=None, engine="python")
            st.dataframe(pd.DataFrame(df.dtypes, columns=["Type"]).T) 
            st.subheader("üìä Statistiques descriptives")
            st.write(df.describe())
            st.subheader("Aper√ßu des donn√©es")
            st.write(df.head())
            numeric = df.select_dtypes(include="number")
        else:
            st.error("Format de fichier non pris en charge.")
            

           
